// Jenkins Pipeline Script

// Define the pipeline to run on any available agent
pipeline {
    agent any

    // Define tools to be used in the pipeline
    tools {
        maven "MAVEN3"
        jdk "OracleJDK8"
    }

    // Define the stages of the pipeline
    stages {
        // Stage 1: Fetch Code from Git repository
        stage('Fetch Code') {
            steps {
                // Clone the Git repository from the specified URL and branch
                git branch: 'main', url: 'https://github.com/hkhcoder/vprofile-project.git'
            }
        }

        // Stage 2: Build the project using Maven
        stage('Build') {
            steps {
                // Build the project using Maven, skipping tests
                sh 'mvn install -DskipTests'
            }

            post {
                // Execute the following block only if the 'Build' stage is successful
                success {
                    echo 'Now Archiving artifacts.'
                    // Archive artifacts (WAR files) for later use or deployment
                    archiveArtifacts artifacts: '**/*.war'
                }
            }
        }

        // Stage 3: Run Unit Tests
        stage('UNIT TESTS') {
            steps {
                // Run unit tests using Maven
                sh 'mvn test'
            }
        }

        // Stage 4: Checkstyle Analysis
        stage('Checkstyle Analysis') {
            steps {
                // Run Checkstyle analysis on the code
                sh 'mvn checkstyle:checkstyle'
            }
        }

        // Stage 5: SonarQube Analysis
        stage('Sonar Analysis') {
            // Set up environment variables for SonarQube scanner
            environment {
                scannerHome = tool 'sonar4.7'
            }

            steps {
                // Run SonarQube scanner with specified parameters
                withSonarQubeEnv('sonar') {
                    sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                    -Dsonar.projectName=vprofile \
                    -Dsonar.projectVersion=1.0 \
                    -Dsonar.sources=src/ \
                    -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                    -Dsonar.junit.reportsPath=target/surefire-reports/ \
                    -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                    -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
                }
            }
        }

        // Stage 6: Quality Gate
        stage('Quality Gate') {
            steps {
                // Wait for the SonarQube Quality Gate to complete
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        // Stage 7: Upload Artifact to Nexus
        stage("UploadArtifact") {
            steps {
                // Use Nexus Artifact Uploader to deploy the WAR file to Nexus repository
                nexusArtifactUploader(
                    nexusVersion: 'nexus3',
                    protocol: 'http',
                    nexusUrl: '3.85.131.165:8081',
                    groupId: 'QA',
                    version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
                    repository: 'vprofile-repo',
                    credentialsId: 'nexuslogin',
                    artifacts: [
                        [artifactId: 'vproapp',
                        classifier: '',
                        file: 'target/vprofile-v2.war',
                        type: 'war']
                    ]
                )
            }
        }
    }
}
